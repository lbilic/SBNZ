package com.siem;

import com.siem.siem.facts.SuccessfulLogin;
import com.siem.siem.facts.FailedLogin;
import com.siem.siem.facts.ProfileChange;
import com.siem.siem.facts.Log;
import com.siem.siem.facts.ThreatDetected;
import com.siem.siem.facts.ThreatEliminated;
import com.siem.siem.facts.ErrorLog;
import com.siem.siem.facts.MaliciousIps;
import com.siem.siem.events.SameAccountDifferenSystemsEvent;
import com.siem.siem.events.ThreatNotRemovedEvent;
import com.siem.siem.events.ProfileChangedAfterFailedLoginEvent;
import com.siem.siem.events.MultipleThreatsDetectedEvent;
import com.siem.siem.events.MaliciousIpLoginSuccess;
import com.siem.siem.events.MaliciousIpLoginFailed;
import java.util.List;

declare SuccessfulLogin
	@role(event)
end

declare FailedLogin
	@role(event)
end

declare ThreatDetected
	@role(event)
end

declare ThreatEliminated
	@role(event)
end

rule "Logging into same account on different system within 10 seconds"
    when
        $sl1: SuccessfulLogin($username : username, $systemType: systemType, $ipAddress: ipAddress)
         Number(intValue >= 1) from accumulate(
            $t2: SuccessfulLogin(
                this != $sl1, 
                username == $username, 
                systemType == $systemType,
                ipAddress == $ipAddress,
                this meets[10s] $sl1
            ),
            count($t2)
        )
    then
        System.out.println("Logging into same account(" + $sl1.getUsername() + ") on different system within 10 sec activated");
		insert(new SameAccountDifferenSystemsEvent($sl1.getUsername(), "Logging into same account on different system within 10 sec"));
        drools.halt();
end

rule "Threat not beeing removed withing 1 hour"
    when
    	$td : ThreatDetected($id : threatId, $ip : ipAddress)
    	not($te : ThreatEliminated( threatId == $id, ipAddress == $ip,
    								 this meets[1h] $td))
    	$te : ThreatEliminated()
    then
        System.out.println("Threat was not eliminated within 1 hour");
        insert(new ThreatNotRemovedEvent($threatId, "Threat was not eliminated within 1 hour"));
        drools.halt();
end

rule "Error log detected"
	when
		$el : ErrorLog()
	then
		System.out.println("Error log detected");
end

rule "Log detected"
	when
		$list : List(size>0) from collect($log: Log())
	then
		System.out.println("List ->" + $list.size());
end

rule "Malicious ip detected in successful login"
	when
		$sl1: SuccessfulLogin(MaliciousIps.maliciousIps contains ipAddress)
	then
		System.out.println("Malicious ip detected in successful login");
		insert(new MaliciousIpLoginSuccess($ipAddress, "Malicious ip detected in successful login"));
        drools.halt();
		
end

rule "Malicious ip detected in failed login"
	when
		$sl1: FailedLogin(MaliciousIps.maliciousIps contains ipAddress)
	then
		System.out.println("Malicious ip detected in failed login");
		insert(new MaliciousIpLoginFailed($ipAddress, "Malicious ip detected in failed login"));
        drools.halt();
end

rule "Malicious ip detected in log"
	when
		$sl1: Log(MaliciousIps.maliciousIps contains ipAddress)
	then
		System.out.println("Malicious ip detected in log");
end

rule "DOS - Brute-force alarm"
	when
		$list: List(size>10) from collect( FailedLogin() over window:time(10s))
	then
		System.out.println("Activate Brute-force alarm");
end

rule "Profile change after 5 bad attepmts from same ip"
	when
		$fl : ProfileChange( $ip : ipAddress , $ts : timestamp, $sys : systemType)
		$sl : SuccessfulLogin( ipAddress == $ip, $ts2 : timestamp ,!timestamp.after($ts), systemType == $sys)
		$list : List(size>5) from collect( FailedLogin( ipAddress == $ip, !timestamp.after($ts2)) over window:time(90s))
	then
		System.out.println("Someone changed profile after few bad attempts");
		insert(new ProfileChangedAfterFailedLoginEvent($ipAddress, "Profile change after 5 bad attepmts from same ip"));
        drools.halt();
end

rule "10 threats detected on same ip"
	when
		ThreatDetected( $ip : ipAddress)
		$list : List(size>6) from collect( ThreatDetected( ipAddress == $ip ) over window:time(10d))
	then
		System.out.println("Ip address with high risk detected");
		insert(new MultipleThreatsDetectedEvent($ipAddress, "Ip address with high risk detected"));
        drools.halt();
end

